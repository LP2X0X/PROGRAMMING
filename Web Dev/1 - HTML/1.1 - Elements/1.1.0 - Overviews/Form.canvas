{
	"nodes":[
		{"id":"9bd88479d66c7556","type":"text","text":"# Form\nThe HTML \\<form> element identifies a document landmark containing interactive controls for submitting information. Nested in a \\<form> you'll find all the interactive (and non-interactive) form controls that make up that form.","x":-125,"y":-30,"width":545,"height":190},
		{"id":"45d2662f0e6d26ba","type":"text","text":"## Input Types & Dynamic Device Keyboards\n\n### 1. **Purpose of Specialized Input Types**\n\nHTML offers over 22 input types (`<input type=\"...\">`) to tailor forms for specific user needs and improve UX.\n\n---\n\n### 2. **Adaptive Virtual Keyboards on Mobile Devices**\n\nOn devices with dynamic on-screen keyboards (e.g., smartphones), the `type` attribute influences which keyboard layout appears:\n\n* **`type=\"tel\"`** shows a numeric keypad — helpful for phone numbers.\n* **`type=\"email\"`** includes the `@` and `.` symbols.\n* **`type=\"url\"`** provides URL-friendly keys like `:`, `/`, and `.`.\n  *Note: On iPhones, the `:` may sometimes be missing.*\n\n---\n\n### 3. **Enhanced Input Controls**\n\nUsing specific input types not only improves UX, but also boosts built-in validation:\n\n* **`tel`** – Offers numeric keyboard; format enforcement needs to be handled manually.\n* **`email`** – Enforces valid email syntax and provides optimized keyboard.\n* **`url`** – Validates well-formed URLs and triggers URL-oriented keyboard.\n* **`number`** – Restricts input to numerals; often displays spinner controls, but be aware: user and browser behavior can vary.\n\n---\n\n### Why It Matters\n\n* Native mobile keyboards tailored to the input type reduce errors and speed data entry.\n* Built-in constraints (like email or URL validation) minimize client-side scripting while ensuring data quality.\n\n---\n\n### Quick Reference Table\n\n| Input Type | Purpose       | Mobile Keyboard Behavior         | Built-in Behavior          |\n| ---------- | ------------- | -------------------------------- | -------------------------- |\n| `tel`      | Phone number  | Numeric keypad                   | No validation by default   |\n| `email`    | Email address | Keyboard with `@`, `.`           | Email format validation    |\n| `url`      | Web address   | URL-friendly keyboard            | URL syntax validation      |\n| `number`   | Numeric data  | Numeric keypad + spinner (often) | Only numeric input allowed |\n","x":25,"y":-1832,"width":954,"height":1112},
		{"id":"fd851528deecc0ec","type":"file","file":"Resources/iphone-keyboard-showing-i-e1d00606a1da7_960.png","x":1084,"y":-1200,"width":201,"height":400},
		{"id":"f501e9955d250568","type":"file","file":"Resources/iphone-keyboard-showing-i-6aab374bde53b_960-1.png","x":1080,"y":-1832,"width":205,"height":400},
		{"id":"a868244491eb1cc4","type":"text","text":"### HTML Checkboxes — Essentials \n\n#### Behavior & Submission\n\n* Checkboxes (`<input type=\"checkbox\">`) let users select **zero or more** options independently.\n* On form submission:\n\n  * **Only checked boxes** contribute key-value pairs—unchecked ones are omitted entirely.\n  * If a checkbox lacks a `value`, browsers default to sending `\"on\"` as the value. \n\n#### Grouping Checkboxes\n\n* You can group checkboxes by giving them the **same `name` attribute**. Checked boxes in the group produce multiple entries with that name:\n\n  ```\n  interest=coding&interest=music\n  ```\n\n#### Required State & Accessibility\n\n* To require a checkbox be checked before submission, use the `required` attribute on the input. Ensure users are informed of this requirement via labeling. \n* For better accessibility:\n\n  * Use `<label>` for each checkbox (connected via `for` and `id`, or by nesting).\n  * Group related checkboxes within a `<fieldset>` accompanied by a `<legend>` to provide context. \n\n---\n\n### Example Code\n\n```html\n<form>\n  <fieldset>\n    <legend>Select your interests (at least one):</legend>\n    <label><input type=\"checkbox\" name=\"hobby\" value=\"painting\" required> Painting</label>\n    <label><input type=\"checkbox\" name=\"hobby\" value=\"music\"> Music</label>\n    <label><input type=\"checkbox\" name=\"hobby\" value=\"reading\"> Reading</label>\n  </fieldset>\n</form>\n```\n\n* ✔ Only checked items are submitted (e.g., `hobby=painting&hobby=reading`).\n* ✔ `required` ensures at least one checkbox is selected before submission.\n* Proper labels and grouping aid accessibility and usability.","x":-1960,"y":-1200,"width":680,"height":1040},
		{"id":"3b897300b4d89f7d","type":"text","text":"### Radio Buttons: Key Concepts\n\n#### 1. Grouping Behavior by `name`\n\n* Radio buttons are grouped using the same **`name` attribute**, which ensures that **only one button in the group can be selected at a time**.\n* If you mistakenly reuse the same `name` for separate groups, selecting an option in one group will deselect any in another group incorrectly sharing that name. \n\n#### 2. Submission of Radio Button Data\n\n* When a form is submitted, the **`name` and `value`** of the **selected** radio button are sent.\n* Unselected radio buttons in the group are **not included** in the submission.\n\n#### 3. Default Selection & CSS Pseudo-classes\n\n* To preselect a radio button when the page loads, include the `checked` attribute. \n* On the CSS side:\n\n  * `:checked` targets the currently selected radio button.\n  * `:default` matches the one originally marked with `checked` even after user interaction (until form reset). \n\n#### 4. Making Selection Required\n\n* To require that at least one radio button in a group be selected before submission, add the `required` attribute to **one** button in that group.\n* The user can select any radio in the group to satisfy the requirement; it doesn’t need to be the one with `required`.\n* Important: Use `<fieldset>` and `<legend>` to provide better accessibility and context for radio button groups. \n\n---\n\n### Example Code Snippet\n\n```html\n<form>\n  <fieldset>\n    <legend>Select your favorite student (required):</legend>\n    <label>\n      <input type=\"radio\" name=\"student\" value=\"hoover\" required>\n      Hoover Sukhdeep\n    </label>\n    <label>\n      <input type=\"radio\" name=\"student\" value=\"blendan\">\n      Blendan Smooth\n    </label>\n    <label>\n      <input type=\"radio\" name=\"student\" value=\"toasty\">\n      Toasty McToastface\n    </label>\n  </fieldset>\n</form>\n```\n\n* **Group behavior**: All radio buttons share the same `name=\"student\"`, forming a group.\n* **Submission**: Only the selected option’s name and value are included.\n* **Required selection**: `required` ensures the user selects an option.\n* **Accessibility**: Using `fieldset` and `legend` labels the group semantically.","x":-1960,"y":66,"width":680,"height":1320},
		{"id":"5c2f647d9aca3986","type":"text","text":"### Labels and Fieldsets\n\n#### **1. [[Web Dev/1 - HTML/1.1 - Elements/1.1.1 - Important/label|<label>]] — Clear Associations**\n\n* The `<label>` element binds a text description to a specific form control (like `<input>`, `<select>`, etc.), enhancing usability and accessibility.\n* Use the `for` attribute to explicitly link a `<label>` to a control’s `id`, or nest the control within the label for implicit association.\n* This connection aids screen readers by announcing the label when the user focuses on the form control, and also **increases the clickable area**, which is especially helpful for checkboxes and radio buttons.\n\n#### **2. `<fieldset>` + `<legend>` — Logical Grouping**\n\n* `<fieldset>` groups related form controls visually and semantically, helping users logically navigate complex forms.\n* Include a `<legend>` as the caption for the fieldset to describe the grouped controls. This caption is announced by screen readers before the inputs, providing vital context.\n* Use cases: grouping radio buttons, checkboxes, or sections like \"Personal Info\" or \"Payment Details.\"\n\n---\n\n#### Practical Example:\n\n```html\n<form>\n  <fieldset>\n    <legend>Choose your fruit preferences:</legend>\n    <p>\n      <input type=\"checkbox\" id=\"apple\" name=\"fruit\" value=\"apple\">\n      <label for=\"apple\">Apple</label>\n    </p>\n    <p>\n      <input type=\"checkbox\" id=\"banana\" name=\"fruit\" value=\"banana\">\n      <label for=\"banana\">Banana</label>\n    </p>\n  </fieldset>\n</form>\n```\n\n* Using `<fieldset>` + `<legend>` groups the checkboxes.\n* `<label>`s tied to inputs improve usability and screen-reader accessibility.\n\n---\n\n#### Key Benefits at a Glance:\n\n| Element      | Benefit                                                        |\n| ------------ | -------------------------------------------------------------- |\n| `<label>`    | Enhances accessibility and increases click target area         |\n| `<fieldset>` | Organizes form layout and logic for readability and navigation |\n| `<legend>`   | Provides context that screen readers announce before controls  |","x":-1960,"y":1640,"width":680,"height":1160},
		{"id":"989fb71686962d89","type":"text","text":"### Accessing Microphone & Camera\n\n#### 1. **Using File Inputs with `capture`**\n\n* The **`<input type=\"file\">`** element enables file uploads via forms, with `accept` limiting file types (e.g., `image/*`, `audio/*`, `video/*`), and the **`capture`** attribute enabling direct media capture from camera or microphone.\n* Example:\n\n  ```html\n  <input type=\"file\" capture=\"user\" accept=\"image/*\">\n  ```\n* Values:\n\n  * `capture=\"user\"`: prompts front-facing camera/mic\n  * `capture=\"environment\"`: prompts back-facing camera\n  * Without value: browser chooses\n* On mobile, this directly opens the camera or mic app. On desktop, it gracefully falls back to a file picker.\n\n---\n\n#### 2. **Using `getUserMedia()` for Live Capture**\n\n* For real-time access to media streams (camera and microphone), the **WebRTC `getUserMedia()` API** is used through JavaScript.\n* Requires:\n\n  * A **secure context** (HTTPS or `localhost`)\n  * **User permission**\n* Basic usage:\n\n  ```html\n  <video autoplay playsinline></video>\n  <script>\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then(stream => document.querySelector('video').srcObject = stream);\n  </script>\n  ```\n* This method allows full integration into the web page, enabling media preview, manipulation, or recording.\n\n---\n\n#### 3. **Privacy & Security Considerations**\n\n* Browsers require **explicit user consent** and typically display an **indicator** when the camera or mic is active (e.g., a red dot in the UI).\n* The `getUserMedia()` API is accessible only in secure contexts; in insecure contexts, `navigator.mediaDevices` is unavailable.\n* Devs should request access **only when needed**, not on page load, to respect user experience and avoid denial.\n\n---\n\n### Summary Table\n\n| Approach                      | How It Works                         | Use Case                           |\n| ----------------------------- | ------------------------------------ | ---------------------------------- |\n| `<input type=\"file\" capture>` | Opens camera or mic app (mobile)     | For simple uploads                 |\n| `getUserMedia()` API          | Streams media directly to page       | Live preview, recording, streaming |\n| Security Requirements         | HTTPS + user permission + indicators | Essential in both methods          |","x":-1000,"y":-2192,"width":720,"height":1272},
		{"id":"6358ce92ac84cbb5","type":"text","text":"### 🔍 What is Built-In Validation?\n\n**Built-in validation** in HTML forms refers to the automatic checking of user input using simple attributes like `required`, `type=\"email\"`, `min`, `pattern`, etc. When the input does not meet the specified constraints, the browser prevents form submission and displays a built-in error message.\n\nThese validations are performed **without JavaScript**, directly by the browser.\n\n---\n\n### ✅ Common Validation Attributes\n\nHere are some commonly used validation attributes:\n\n| Attribute                | Description                                   |\n| ------------------------ | --------------------------------------------- |\n| `required`               | Field must be filled out before submitting    |\n| `type=\"email\"`           | Input must be a valid email address           |\n| `min`, `max`             | Numeric values must fall within this range    |\n| `minlength`, `maxlength` | Text length must be within the range          |\n| `pattern`                | Input must match a regular expression pattern |\n\n---\n\n### 📌 Example: Built-In Form Validation\n\n```html\n<form>\n  <label for=\"name\">Name (required):</label>\n  <input id=\"name\" name=\"name\" required />\n\n  <label for=\"email\">Email (must be valid):</label>\n  <input id=\"email\" name=\"email\" type=\"email\" required />\n\n  <label for=\"age\">Age (between 18 and 100):</label>\n  <input id=\"age\" name=\"age\" type=\"number\" min=\"18\" max=\"100\" />\n\n  <label for=\"password\">Password (min 6 chars):</label>\n  <input id=\"password\" name=\"password\" type=\"password\" minlength=\"6\" required />\n\n  <label for=\"zip\">ZIP Code (5 digits only):</label>\n  <input id=\"zip\" name=\"zip\" pattern=\"\\d{5}\" required />\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nThe form above ensures:\n\n* The name, email, password, and zip fields must be filled.\n* The email must be in valid format.\n* The password must be at least 6 characters.\n* The ZIP must match the `\\d{5}` pattern (5 digits).\n* Age must be between 18 and 100 (if filled).\n\n---\n\n### 👍 Benefits\n\n* **Easy to use**: Just add attributes—no JavaScript needed.\n* **Good accessibility**: Native error messages are usually accessible by screen readers.\n* **Lightweight**: No extra libraries or code needed.\n* **Works offline**: Doesn’t rely on external scripts.\n\n---\n\n### 👎 Limitations\n\n* Can only show **one error per field** at a time.\n* Error **messages can't be styled easily** or customized per field.\n* No cross-field logic (e.g., matching passwords).\n* **No asynchronous checks** (e.g., \"username already taken\").\n\n---\n\n### 🛠 Enhancing with JavaScript (Optional)\n\nTo go beyond the basic behavior, you can:\n\n* Use the `checkValidity()` method to trigger validation in JavaScript.\n* Use `setCustomValidity()` to provide custom messages.\n* Add `:invalid` and `:valid` CSS selectors to style fields visually.\n\n---\n\n### 🧠 Best Practices\n\n* **Use built-in validation** for standard rules (required, email, pattern).\n* **Complement with server-side validation** to ensure security.\n* **Add JavaScript validation** only when needed for advanced logic or UX.\n* Keep **form feedback accessible** and clear to users.","x":-228,"y":1386,"width":752,"height":1957},
		{"id":"5667fcbba831974f","type":"text","text":"### After Submitting the Form\n\n* When you submit a form, the browser sends the `name=value` pairs for every named form control:\n\n  * The **name** comes from the `name` attribute.\n  * The **value** comes from either the control’s `value` attribute or the user’s input (e.g., `<textarea>`’s inner text, or `<select>`’s chosen option).\n\n* The example provided:\n\n  ```html\n  <form method=\"GET\">\n    <select name=\"student\" id=\"student\">\n      <option value=\"hoover\">Hoover Sukhdeep</option>\n      <option>Blendan Smooth</option>\n    </select>\n    <input type=\"submit\" value=\"Submit Form\">\n  </form>\n  ```\n\n  Submitting this form when \"Hoover Sukhdeep\" is selected will reload the page and update the URL to:\n\n  ```\n  …?student=hoover\n  ```\n\n  Since the second option lacks a `value`, its visible text (\"Blendan Smooth\") becomes the submitted value.\n\n* In general:\n\n  * All named form controls contribute to the submission—except:\n\n    * Unselected checkboxes or radio buttons\n    * Buttons other than the one used to submit the form\n  * Controls with a `name` but no entered value are still submitted with an empty value.\n","x":1080,"y":520,"width":797,"height":640},
		{"id":"7d4c94ef5cb6a043","type":"text","text":"### Submitting Forms \n\n* **Submit Buttons**: Forms are sent when a user clicks a submit control, such as:\n\n  ```html\n  <input type=\"submit\" value=\"Submit Form\">\n  <button type=\"submit\">Submit Form</button>\n  ```\n\n```ad-important\nAny \\<button\\> inside a \\<form\\> without type=\"button\" **acts as** type=\"submit\".\n```\n\n* **Form Attributes**:\n\n  * **`action`** defines the URL where form data will be sent.\n  * **`method`** specifies the HTTP method — typically `GET` (declares data in the URL) or `POST` (includes data in the request body). Defaults to submitting to the current page.\n\n* **Controls Outside `<form>`**: You can link form elements outside the `<form>` using the `form` attribute, referencing the `<form>`’s `id`. But be cautious—mismatched associations can create bugs.\n\n* **Override Behavior via Button Attributes**: Submit buttons can override the form's attributes using their own:\n\n  * `formaction`\n  * `formmethod`\n  * `formenctype`\n  * `formnovalidate`\n  * `formtarget`\n    These take precedence over the form’s values when the button is used to submit.\n\n* **Disabling Validation**:\n\n  * Use `novalidate` on the `<form>` to skip browser validation entirely.\n  * Or use `formnovalidate` on individual submit buttons to bypass validation for that submission.\n\n* **Identifying Submit Buttons**:\n\n  * To know which button triggered the submission on the server side, give the button a `name` (and `value` if needed). Buttons without these attributes aren’t included in the submission payload.","x":1080,"y":-440,"width":797,"height":788}
	],
	"edges":[
		{"id":"3a7137583c811470","fromNode":"9bd88479d66c7556","fromSide":"right","toNode":"7d4c94ef5cb6a043","toSide":"left"},
		{"id":"5b687e8200e092b7","fromNode":"9bd88479d66c7556","fromSide":"right","toNode":"5667fcbba831974f","toSide":"left"},
		{"id":"e9dbbd043c971eb8","fromNode":"9bd88479d66c7556","fromSide":"left","toNode":"a868244491eb1cc4","toSide":"right"},
		{"id":"99c727cffed4ed80","fromNode":"9bd88479d66c7556","fromSide":"left","toNode":"3b897300b4d89f7d","toSide":"right"},
		{"id":"e261ea05500b3471","fromNode":"9bd88479d66c7556","fromSide":"left","toNode":"5c2f647d9aca3986","toSide":"right"},
		{"id":"255d316e9175da2e","fromNode":"9bd88479d66c7556","fromSide":"top","toNode":"45d2662f0e6d26ba","toSide":"bottom"},
		{"id":"096ca3169818caf5","fromNode":"45d2662f0e6d26ba","fromSide":"right","toNode":"f501e9955d250568","toSide":"left"},
		{"id":"a4b36d0e38963b02","fromNode":"45d2662f0e6d26ba","fromSide":"right","toNode":"fd851528deecc0ec","toSide":"left"},
		{"id":"4615bd8ceb0ac62f","fromNode":"9bd88479d66c7556","fromSide":"top","toNode":"989fb71686962d89","toSide":"bottom"},
		{"id":"498681b41697df30","fromNode":"9bd88479d66c7556","fromSide":"bottom","toNode":"6358ce92ac84cbb5","toSide":"top"}
	],
	"metadata":{
		"version":"1.0-1.0",
		"frontmatter":{}
	}
}