{
	"nodes":[
		{"id":"9bd88479d66c7556","type":"text","text":"# Form\nThe HTML \\<form> element identifies a document landmark containing interactive controls for submitting information. Nested in a \\<form> you'll find all the interactive (and non-interactive) form controls that make up that form.","x":-125,"y":-30,"width":545,"height":190},
		{"id":"7d4c94ef5cb6a043","type":"text","text":"### Submitting Forms \n\n* **Submit Buttons**: Forms are sent when a user clicks a submit control, such as:\n\n  ```html\n  <input type=\"submit\" value=\"Submit Form\">\n  <button type=\"submit\">Submit Form</button>\n  ```\n\n* **Form Attributes**:\n\n  * **`action`** defines the URL where form data will be sent.\n  * **`method`** specifies the HTTP method — typically `GET` (declares data in the URL) or `POST` (includes data in the request body). Defaults to submitting to the current page.\n\n* **Controls Outside `<form>`**: You can link form elements outside the `<form>` using the `form` attribute, referencing the `<form>`’s `id`. But be cautious—mismatched associations can create bugs.\n\n* **Override Behavior via Button Attributes**: Submit buttons can override the form's attributes using their own:\n\n  * `formaction`\n  * `formmethod`\n  * `formenctype`\n  * `formnovalidate`\n  * `formtarget`\n    These take precedence over the form’s values when the button is used to submit.\n\n* **Disabling Validation**:\n\n  * Use `novalidate` on the `<form>` to skip browser validation entirely.\n  * Or use `formnovalidate` on individual submit buttons to bypass validation for that submission.\n\n* **Identifying Submit Buttons**:\n\n  * To know which button triggered the submission on the server side, give the button a `name` (and `value` if needed). Buttons without these attributes aren’t included in the submission payload.","x":580,"y":-268,"width":797,"height":667},
		{"id":"5667fcbba831974f","type":"text","text":"### After Submitting the Form\n\n* When you submit a form, the browser sends the `name=value` pairs for every named form control:\n\n  * The **name** comes from the `name` attribute.\n  * The **value** comes from either the control’s `value` attribute or the user’s input (e.g., `<textarea>`’s inner text, or `<select>`’s chosen option).\n\n* The example provided:\n\n  ```html\n  <form method=\"GET\">\n    <select name=\"student\" id=\"student\">\n      <option value=\"hoover\">Hoover Sukhdeep</option>\n      <option>Blendan Smooth</option>\n    </select>\n    <input type=\"submit\" value=\"Submit Form\">\n  </form>\n  ```\n\n  Submitting this form when \"Hoover Sukhdeep\" is selected will reload the page and update the URL to:\n\n  ```\n  …?student=hoover\n  ```\n\n  Since the second option lacks a `value`, its visible text (\"Blendan Smooth\") becomes the submitted value.\n\n* In general:\n\n  * All named form controls contribute to the submission—except:\n\n    * Unselected checkboxes or radio buttons\n    * Buttons other than the one used to submit the form\n  * Controls with a `name` but no entered value are still submitted with an empty value.\n","x":580,"y":520,"width":797,"height":640},
		{"id":"3b897300b4d89f7d","x":-840,"y":240,"width":680,"height":1320,"type":"text","text":"### Radio Buttons: Key Concepts\n\n#### 1. Grouping Behavior by `name`\n\n* Radio buttons are grouped using the same **`name` attribute**, which ensures that **only one button in the group can be selected at a time**.\n* If you mistakenly reuse the same `name` for separate groups, selecting an option in one group will deselect any in another group incorrectly sharing that name. \n\n#### 2. Submission of Radio Button Data\n\n* When a form is submitted, the **`name` and `value`** of the **selected** radio button are sent.\n* Unselected radio buttons in the group are **not included** in the submission.\n\n#### 3. Default Selection & CSS Pseudo-classes\n\n* To preselect a radio button when the page loads, include the `checked` attribute. \n* On the CSS side:\n\n  * `:checked` targets the currently selected radio button.\n  * `:default` matches the one originally marked with `checked` even after user interaction (until form reset). \n\n#### 4. Making Selection Required\n\n* To require that at least one radio button in a group be selected before submission, add the `required` attribute to **one** button in that group.\n* The user can select any radio in the group to satisfy the requirement; it doesn’t need to be the one with `required`.\n* Important: Use `<fieldset>` and `<legend>` to provide better accessibility and context for radio button groups. \n\n---\n\n### Example Code Snippet\n\n```html\n<form>\n  <fieldset>\n    <legend>Select your favorite student (required):</legend>\n    <label>\n      <input type=\"radio\" name=\"student\" value=\"hoover\" required>\n      Hoover Sukhdeep\n    </label>\n    <label>\n      <input type=\"radio\" name=\"student\" value=\"blendan\">\n      Blendan Smooth\n    </label>\n    <label>\n      <input type=\"radio\" name=\"student\" value=\"toasty\">\n      Toasty McToastface\n    </label>\n  </fieldset>\n</form>\n```\n\n* **Group behavior**: All radio buttons share the same `name=\"student\"`, forming a group.\n* **Submission**: Only the selected option’s name and value are included.\n* **Required selection**: `required` ensures the user selects an option.\n* **Accessibility**: Using `fieldset` and `legend` labels the group semantically."}
	],
	"edges":[
		{"id":"3a7137583c811470","fromNode":"9bd88479d66c7556","fromSide":"right","toNode":"7d4c94ef5cb6a043","toSide":"left"},
		{"id":"5b687e8200e092b7","fromNode":"9bd88479d66c7556","fromSide":"right","toNode":"5667fcbba831974f","toSide":"left"}
	]
}