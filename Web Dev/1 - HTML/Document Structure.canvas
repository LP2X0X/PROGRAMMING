{
	"nodes":[
		{"id":"e3d2480ec40f0aba","type":"text","text":"There are several features that should be considered essential for any and every web page. Browsers will still render content if these elements are missing, but include them. Always.","x":-400,"y":15,"width":705,"height":90},
		{"id":"dc1515b1329875fa","type":"text","text":"### `<!DOCTYPE html>`\n- The first thing in any HTML document is the preamble. For HTML, all you need is `<!DOCTYPE html>`.\n- It tells the browser to use standard mode instead of [quirks mode](https://developer.mozilla.org/docs/Web/HTML/Quirks_Mode_and_Standards_Mode).","x":560,"y":-160,"width":762,"height":150},
		{"id":"76905bcbb96ec026","type":"text","text":"### `<html>`\n- It is the root element for an HTML document. \n- It is the parent of the `<head>` and `<body>`, containing everything in the HTML document other than the doctype.\n- In the `<html>` document contain the `lang` language attribute which helps define the main language of the document.\n\t- The value of the lang attribute is a two- or three-letter ISO language code followed by the region.\n\t- It only adds semantics, enabling assistive technologies and automated services to know the language of the impacted content.\n\t- In addition to setting the language for the document and exceptions to that base language, the attribute can be used in CSS selectors. \\<span lang=\"fr-fr\">Ceci n'est pas une pipe.\\</span> can be targeted with the attribute and language selectors [lang|=\"fr\"] and :lang(fr).","x":560,"y":40,"width":762,"height":345},
		{"id":"171f7a66ef852810","type":"text","text":"### Character encoding\n\n- The very first element in the `<head>` should be the `charset` character encoding declaration. It comes before the title to ensure the browser can render the characters in that title and all the characters in the rest of the document.\n\n- The [default encoding](https://html.spec.whatwg.org/multipage/parsing.html#documentEncoding) in most browsers is `windows-1252`, depending on the locale. However, you should use [`UTF-8`](https://developer.mozilla.org/docs/Glossary/UTF-8), as it enables the one- to four-byte encoding of all characters, even ones you didn't even know existed. Also, it's the encoding type required by HTML5.\n\t```html\n\t<meta charset=\"utf-8\" />\n\t```\n\n- The character encoding is inherited into everything in the document, even `<style>` and `<script>`. This little declaration means you can include emojis in class names and the selectorAPI (again, please don't). If you do [use emojis](https://readabilityguidelines.co.uk/images/emojis/), make sure to use them in a way that enhances usability without harming accessibility.","x":3640,"y":-5376,"width":960,"height":336},
		{"id":"9377d926842f3698","type":"text","text":"### Document title\n\n- Your home page and all additional pages should each have a unique title. The contents for the document title, the text between the opening and closing `<title>` tags, are displayed in the browser tab, the list of open windows, the history, search results, and, unless redefined with [`<meta>` tags](https://web.dev/learn/html/metadata?authuser=1), in social media cards.\n\t```html\n\t<title>Machine Learning Workshop</title>\n\t```","x":3640,"y":-4947,"width":960,"height":227},
		{"id":"90c7b8ef0feeb33b","type":"text","text":"### Viewport metadata\n\n- The other meta tag that should be considered essential is the viewport meta tag, which helps site responsiveness, enabling content to render well by default, no matter the viewport width. While the viewport meta tag has been around since June 2007, when the first iPhone came out, it's only recently been documented in a specification. As it enables controlling a viewport's size and scale, and prevents the site's content from being sized down to fit a 960px site onto a 320px screen, it is definitely recommended.\n\t```html\n\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t```\n\n- The preceding code means \"make the site responsive, starting by making the width of the content the width of the screen\". In addition to width, you can set zoom and scalability, but they both default to accessible values. If you want to be explicit, include:\n\t```html\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=1\" />\n\t```\n","x":3640,"y":-4617,"width":960,"height":377},
		{"id":"8f55f2948d88937b","type":"text","text":"### [[Links.canvas|Links]]\n\n- The `link` element is used to create relationships between the HTML document and external resources. Some of these resources may be downloaded, others are informational. \n\t- The type of relationship is defined by the value of the `rel` attribute. There are currently [25 available values for the `rel` attribute](https://html.spec.whatwg.org/multipage/links.html#linkTypes) that can be used with `<link>`, `<a>` and `<area>`, or `<form>`, with a few that can be used with all. It's preferable to include those related to meta information in the head and those related to performance in the `<body>`.\n","x":3640,"y":-4147,"width":960,"height":208},
		{"id":"2dc2001248012459","type":"text","text":"### Style\n\n1. **Cascade Layers with `@import`**\n    \n    - If you canâ€™t edit an external CSS file, you can use `@import` inside a `<style>` block in the `<head>` to assign it to a cascade layer:\n        \n        ```html\n        <style>\n          @import \"styles.css\" layer(firstLayer);\n        </style>\n        ```\n        \n    - `@import` must appear at the very start of a `<style>` or CSS file.\n        \n2. **Custom Properties**\n    \n    - Declaring CSS variables in `<style>` within `<head>` is common:\n        \n        ```html\n        <style>\n          :root {\n            --theme-color: #226DAA;\n          }\n        </style>\n        ```\n        \n3. **Best Practices**\n    \n    - Always place `<link>` and `<style>` tags in the `<head>` for better performance and to avoid content repainting.\n        \n    - Avoid putting styles in the body or using inline styles in the head â€” they work but aren't ideal.\n        \n4. **Fun Trick with Editable Styles**\n    \n    - You can create a visible, editable `<style>` block using inline styles for experimental purposes:\n        \n        ```html\n        <style contenteditable style=\"display: block;\">\n          head { display: block; }\n          head * { display: none; }\n        </style>\n        ```","x":3640,"y":-3795,"width":960,"height":700},
		{"id":"936e063704d61de8","type":"text","text":"### Script\n\n1. **Purpose of `<script>`**\n\n   * Used to embed or load scripts, typically JavaScript.\n   * Default type is JavaScript; use `type=\"module\"` for JS modules or specify another MIME type for other scripting languages.\n\n2. **Inline vs External Scripts**\n\n   * Scripts can be written inline or loaded via `src`.\n   * In the MLW context, scripts are kept inline and minimal.\n\n3. **Script Placement Matters**\n\n   * Place scripts **at the end of `<body>`**, not in `<head>`, unless using `defer`/`async`.\n     * Ensures DOM elements exist before script runs.\n     * Avoids blocking HTML rendering and asset downloading.\n\n4. **Performance Attributes**\n\n   * `defer`: Downloads script without blocking rendering, executes after HTML is fully parsed.\n   * `async`: Downloads script without blocking rendering, but executes immediately when ready, pausing rendering.\n![[loading-using-async-def-1bd40cbd444a2_1440-1.png|500]]\n\n5. **Best Practice Example**\n\n   ```html\n   <script src=\"js/switch.js\" defer></script>\n   ```\n\n   * Use `defer` on external scripts to improve performance.","x":3640,"y":-2975,"width":880,"height":748},
		{"id":"d46997bd0c3a0dff","type":"text","text":"### Base\n- There is another element that is only found in the \\<head>. Not used very often, the \\<base> element allows setting a default link URL and target. The href attribute defines the base URL for all relative links.\n\t- `href`: Sets the base URL for all relative URLs (`<a>`, `<img>`, `<script>`, etc.).\n\t- `target`: Sets the default target for links (`_blank`, `_self`, etc.).\n\t```html\n\t<head>\n\t  <base href=\"https://example.com/\" target=\"_blank\">\n\t</head>\n\t<body>\n\t  <a href=\"about.html\">About</a> <!-- Opens https://example.com/about.html in new tab -->\n\t</body>\n\t```\n\t\n```ad-note\nThere can be only one `<base>` element in a document, and it should come before any relative URLs are used, including possible script or stylesheet references.\n```","x":3640,"y":-2107,"width":880,"height":507},
		{"id":"b650673ca44b0b15","type":"text","text":"### Meta\n\nThe `<meta>` tag in HTML gives **metadata** about the page â€” important for browsers, search engines, and social media platforms.\n\n---\n\n### ðŸ§© **Where it goes**\n\n- Inside the `<head>` tag.\n    \n- Not visible to users, but used by tools and platforms.\n    \n\n---\n\n### ðŸ”§ **Common Types of `<meta>` Tags**\n\n|Purpose|Example|\n|---|---|\n|**Character encoding**|`<meta charset=\"UTF-8\">`|\n|**Viewport (responsive)**|`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`|\n|**SEO: Description**|`<meta name=\"description\" content=\"Your site summary for search engines\">`|\n|**Author Info**|`<meta name=\"author\" content=\"Your Name\">`|\n|**Redirect / Refresh**|`<meta http-equiv=\"refresh\" content=\"5;url=https://example.com\">`|\n\n---\n\n### ðŸ§  **Attributes**\n\n- `name`: Type of metadata (e.g. \"viewport\", \"description\", \"author\")\n- `content`: The value associated with `name`\n- `charset`: Character encoding (usually \"UTF-8\")\n- `http-equiv`: Used to simulate HTTP headers (e.g., `refresh`, `content-type`)\n\n---\n\n### ðŸ”— **Open Graph Meta Tags**\n\nOpen Graph tags are used by **social media** (like Facebook, LinkedIn) to show rich link previews.\n\n|Property|Description|Example|\n|---|---|---|\n|`og:title`|Title of the page|`<meta property=\"og:title\" content=\"My Awesome Page\">`|\n|`og:description`|Description shown in the preview|`<meta property=\"og:description\" content=\"This page is about...\">`|\n|`og:image`|Image shown in the preview|`<meta property=\"og:image\" content=\"https://example.com/image.jpg\">`|\n|`og:url`|Canonical URL of the page|`<meta property=\"og:url\" content=\"https://example.com/page\">`|\n|`og:type`|Type of content (e.g., website, article)|`<meta property=\"og:type\" content=\"website\">`|\n|`og:site_name`|Name of the website|`<meta property=\"og:site_name\" content=\"My Site\">`|\n\n---\n\n### ðŸ“Œ **Full Example**\n\n```html\n<head>\n  <!-- Standard Meta Tags -->\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"description\" content=\"Learn HTML, CSS, and JS the fun way.\">\n  <meta name=\"author\" content=\"John Doe\">\n\n  <!-- Open Graph Meta Tags -->\n  <meta property=\"og:title\" content=\"Learn Web Development\">\n  <meta property=\"og:description\" content=\"Start learning HTML, CSS, and JS with easy tutorials.\">\n  <meta property=\"og:image\" content=\"https://example.com/preview.jpg\">\n  <meta property=\"og:url\" content=\"https://example.com/learn\">\n  <meta property=\"og:type\" content=\"website\">\n  <meta property=\"og:site_name\" content=\"DevLearn\">\n</head>\n```\n\n---\n\n### âœ… **Why Use Open Graph?**\n\n- Enhances **link previews** when shared on platforms like Facebook, X, LinkedIn.\n    \n- Improves **click-through rates** and professional appearance.\n    ","x":3640,"y":-1467,"width":960,"height":1680},
		{"id":"e44dcccdce5826de","type":"text","text":"### CSS\n\n- The main two ways to include styles in your HTML file are by including an external resource using a `<link>` element with the `rel` attribute set to `stylesheet`, or including CSS directly in the head of your document within opening and closing `<style>` tags.\n\n- The `<link>` tag is the preferred method of including stylesheets. Linking a single or a few external style sheets is good for both developer experience and site performance: you get to maintain CSS in one spot instead of it being sprinkled everywhere, and *browsers can cache the external file*, meaning it doesn't have to be downloaded again with every page navigation.\n\n- The syntax is `<link rel=\"stylesheet\" href=\"styles.css\">`, where styles.css is the URL of your stylesheet.\n\t- You'll often see `type=\"text/css\"`. Not necessary! If you are including styles written in something other than CSS, the `type` is needed, but since there isn't any other type, this attribute isn't needed.\n\t- The `rel` attribute defines the relationship: in this case `stylesheet`. If you omit this, your CSS **will not be linked**.","x":5280,"y":-4741,"width":1088,"height":318},
		{"id":"ef26a398e364675c","type":"text","text":"### Favicon\n\n- Use the `<link>` tag, with the `rel=\"icon\"` attribute/value pair to identify the favicon to be used for your document. A favicon is a very small icon that appears on the browser tab, generally to the left of the document title. When you have an unwieldy number of tabs open, the tabs will shrink and the title may disappear altogether, but the icon always remains visible.\n\n- If you don't declare a favicon, the browser will look for a file named `favicon.ico` in the top-level directory (the website's root folder). With `<link>`, you can use a different file name and location:\n\t```html\n\t<link rel=\"icon\" sizes=\"16x16 32x32 48x48\" type=\"image/png\" href=\"/images/mlwicon.png\" />\n\t```\n\n- The preceding code says \"use the `mlwicon.png` as the icon for scenarios where a 16px, 32px, or 48px makes sense.\" The sizes attribute accepts the value of `any` for scalable icons or a space-separated list of square `widthXheight` values; where the width and height values are 16, 32, 48, or greater in that geometric sequence, the pixel unit is omitted, and the X is case-insensitive.\n\n```html\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/mlwicon.png\" />\n<link rel=\"mask-icon\" href=\"/images/mlwicon.svg\" color=\"#226DAA\" />\n```\n\n```ad-tip\nWhile you can use `<link>` to define a completely different image on each page or even each page load, don't. \n```","x":5280,"y":-4277,"width":1088,"height":537},
		{"id":"ffb26f6485a46421","type":"text","text":"### Alternate versions of the site\n\n- We use the alternate value of the rel attribute to identify translations, or alternate representations, of the site.\n- Let's pretend we have versions of the site translated into French and Brazilian Portuguese:\n\t```html\n\t\t<link rel=\"alternate\" href=\"https://www.machinelearningworkshop.com/fr/\" hreflang=\"fr-FR\" />\n\t\t<link rel=\"alternate\" href=\"https://www.machinelearningworkshop.com/pt/\" hreflang=\"pt-BR\" />\n\t```\n\n- When using alternate for a translation, the hreflang attribute must be set.\n- The alternate value is for more than just translations. For example, the type attribute can define the alternate URI for an RSS feed when the type attribute is set to application/rss+xml or application/atom+xml. Let's link to a pretend PDF version of the site.\n\t```html\n\t<link rel=\"alternate\" type=\"application/x-pdf\" href=\"https://machinelearningworkshop.com/mlw.pdf\" />\n\t```\n\n- If the rel value is [alternate stylesheet](https://developer.mozilla.org/docs/Web/CSS/Alternative_style_sheets), it defines an alternate stylesheet and the title attribute must be set giving that alternate style a name.","x":5280,"y":-3589,"width":1088,"height":400},
		{"id":"830b8943deb9198b","type":"text","text":"### Canonical\n\n- If you create several translations or versions of Machine Learning Workshop, search engines may get confused as to which version is the authoritative source. For this, use `rel=\"canonical\"` to identify the preferred URL for the site or application.\n\n- Include the canonical URL on all of your translated pages, and on the home page, indicating our preferred URL:\n\t```html\n\t<link rel=\"canonical\" href=\"https://www.machinelearning.com\" />\n\t```\n\n- The `rel=\"canonical\"` canonical link is most often used for cross-posting with publications and blogging platforms to credit the original source; when a site syndicates content, it should include the canonical link to the original source.","x":5280,"y":-3095,"width":1088,"height":280},
		{"id":"0741359314149e00","type":"text","text":"### \\<head>\n\n- The \\<head>, or document metadata header, contains all the metadata for a site or application. The body contains the visible content. The rest of this section focuses on the components found nested inside the opening and closing \\<head>\\</head>\n- The document metadata, including the document title, character set, viewport settings, description, base URL, stylesheet links, and icons, are found in the `<head>` element. While you may not need all these features, always include character set, title, and viewport settings.","x":2400,"y":-4174,"width":762,"height":235},
		{"id":"3e4d6c709d5c9bb1","type":"text","text":"### \\<body>\n\n- Contains **all visible content** of the web page.\n- Goes **after `<head>`** inside `<html>`.\n- Holds elements like text, images, buttons, forms, etc.\n- Avoid putting metadata or styles here.\n\n```html\n<body>\n  <h1>Hello!</h1>\n  <p>This is my site.</p>\n</body>\n```","x":2400,"y":4000,"width":762,"height":320},
		{"id":"93f7f6ebd2d9c935","type":"text","text":"### Header\n- Represents **introductory content** or a **section heading**.\n- Can include:\n    - Logos\n    - Titles\n    - Navigation menus\n    - Author info\n- When the `<header>` is top level, it is the site `banner`, a landmark role, which you may have noted in the `role` code block. When a `<header>` is nested in `<main>`, `<article>`, or `<section>`, it just identifies it as the header for that section and isn't a landmark.","x":3640,"y":640,"width":827,"height":308},
		{"id":"e99ba26801f321db","type":"text","text":"### Footer\n\n- Represents the **bottom section** of a page or section.\n- Often contains:\n    - Copyright\n    - Contact info\n    - Site links\n    - Social media icons\n\n---\n\n### âœ… Example:\n\n```html\n<footer>\n  <p>&copy; 2025 My Website</p>\n  <a href=\"/privacy\">Privacy Policy</a>\n</footer>\n```\n\n---\n\n### ðŸ’¡ Notes:\n\n- Can be used **once per page** (site-wide footer), or **within sections/articles**.\n- Automatically treated as a **landmark** with the role `contentinfo`.\nUse `<footer>` to wrap **ending or supplementary info**.","x":3640,"y":1680,"width":580,"height":620},
		{"id":"72d6398c49037f1f","type":"text","text":"### [[Navigation.canvas|Nav]]\n- Represents **navigation links** in a web page.\n- Used for **menus**, **tables of contents**, or **breadcrumb trails**.\n- Helps **screen readers** quickly find and jump to site navigation.\n\n---\n\n### âœ… Example\n```html\n<nav>\n  <a href=\"/\">Home</a>\n  <a href=\"/about\">About</a>\n  <a href=\"/contact\">Contact</a>\n</nav>\n```\n\n---\n### ðŸ’¡ Notes\n\n- Often appears in the `<header>` or `<aside>`.\n- Donâ€™t use `<nav>` for **every group of links** â€” only **major navigation**.\nUse `<nav>` to group **primary or important** links for accessibility and structure.","x":3640,"y":1040,"width":580,"height":560},
		{"id":"df219ae6a547bc3c","type":"text","text":"### Main\n\n* Represents the **main content** of the page.\n* Should be **unique** â€” only **one `<main>`** per page.\n* Excludes headers, footers, navigation, and sidebars.\n* Helps **accessibility** tools (like screen readers) focus on primary content.\n\n---\n\n### âœ… Example:\n\n```html\n<main>\n  <h1>Blog Post</h1>\n  <p>This is the main article content.</p>\n</main>\n```\n\nUse it to wrap the **core purpose** of the page!\n","x":3640,"y":2400,"width":580,"height":440},
		{"id":"ec4b593ff87f02ab","type":"text","text":"### Aside\n\n* Represents **content related to the main content**, but not essential.\n* Often used for:\n\n  * Sidebars\n  * Ads\n  * Pull quotes\n  * Related links or info boxes\n\n---\n\n### âœ… Example:\n\n```html\n<aside>\n  <h2>Related Articles</h2>\n  <ul>\n    <li><a href=\"/tips\">HTML Tips</a></li>\n    <li><a href=\"/css-guide\">CSS Guide</a></li>\n  </ul>\n</aside>\n```\n\n---\n\n### ðŸ’¡ Notes:\n\n* Treated as a **landmark** (`role=\"complementary\"`).\n* Should make sense even if removed â€” itâ€™s **extra**, not core.\n\nUse `<aside>` for **side content** that supports or enhances the main content.\n","x":3640,"y":2920,"width":580,"height":680},
		{"id":"4b7a84893663ac8c","type":"text","text":"### Article\n\n* An article represents a complete, or self-contained, section of content that is, in principle, independently reusable.\n* Commonly used for:\n\n  * Blog posts\n  * News articles\n  * Forum posts\n  * Product cards\n  * Comments\n\n---\n\n### âœ… Example:\n\n```html\n<article>\n  <h2>How to Use the `<article>` Tag</h2>\n  <p>The `<article>` element is perfect for blog entries or news stories.</p>\n</article>\n```\n\n---\n\n### ðŸ’¡ Notes:\n\n* Each `<article>` should make **sense on its own**, even outside the page.\n* Can contain headers, footers, images, etc.\n\nUse `<article>` when your content could be **syndicated, linked, or reused** separately.\n","x":3640,"y":3680,"width":580,"height":700},
		{"id":"da6bb16c6b52b05e","type":"text","text":"### Section\n* Represents a **thematic grouping** of content within a page.\n* Used to **break content into logical chunks** with a heading.\n* Great for structuring documents like chapters, tabs, or topic blocks.\n---\n\n### âœ… Example:\n\n```html\n<section>\n  <h2>Features</h2>\n  <p>Our product includes many useful features...</p>\n</section>\n```\n\n---\n\n### ðŸ§  Notes:\n\n* Each `<section>` **should have a heading** (`<h1>`â€“`<h6>`) to define its purpose.\n* Not always standalone like `<article>`, but still meaningful.\n\nUse `<section>` to organize content by **topic or purpose** within your layout.\n","x":3640,"y":4460,"width":580,"height":560},
		{"id":"9e54c48bdc5dfcb2","type":"text","text":"### Headings\n\n* Define **section titles** and organize page structure.\n* Ranges from:\n  * `<h1>` = most important (main title)\n  * to\n  * `<h6>` = least important (smallest subheading)\n\n---\n\n### âœ… Example:\n\n```html\n<h1>Welcome to My Site</h1>\n<h2>About Us</h2>\n<h3>Our History</h3>\n```\n\n---\n\n### ðŸ“Œ Notes:\n\n* Use **only one `<h1>`** per page for the main title.\n* Headings create a **hierarchy**, like an outline.\n* Help both **users** and **screen readers** navigate content.\n\nUse headings to **structure** your content clearly and semantically!\n","x":3640,"y":5080,"width":580,"height":600}
	],
	"edges":[
		{"id":"405b23826ef27636","fromNode":"e3d2480ec40f0aba","fromSide":"right","toNode":"dc1515b1329875fa","toSide":"left"},
		{"id":"cc4859476394d50f","fromNode":"e3d2480ec40f0aba","fromSide":"right","toNode":"76905bcbb96ec026","toSide":"left"},
		{"id":"318a8af01df6889f","fromNode":"76905bcbb96ec026","fromSide":"right","toNode":"0741359314149e00","toSide":"left"},
		{"id":"8907f86e90b1d621","fromNode":"0741359314149e00","fromSide":"right","toNode":"171f7a66ef852810","toSide":"left"},
		{"id":"bcbb184a5253950e","fromNode":"0741359314149e00","fromSide":"right","toNode":"9377d926842f3698","toSide":"left"},
		{"id":"1efc835937c83b74","fromNode":"0741359314149e00","fromSide":"right","toNode":"90c7b8ef0feeb33b","toSide":"left"},
		{"id":"9ed8221f8c303aeb","fromNode":"0741359314149e00","fromSide":"right","toNode":"8f55f2948d88937b","toSide":"left"},
		{"id":"5bfba893f1d34fc1","fromNode":"8f55f2948d88937b","fromSide":"right","toNode":"e44dcccdce5826de","toSide":"left"},
		{"id":"a34eef111d8446ff","fromNode":"0741359314149e00","fromSide":"right","toNode":"2dc2001248012459","toSide":"left"},
		{"id":"7de0d0865ea87694","fromNode":"8f55f2948d88937b","fromSide":"right","toNode":"ef26a398e364675c","toSide":"left"},
		{"id":"fdce095e8978e9d2","fromNode":"8f55f2948d88937b","fromSide":"right","toNode":"ffb26f6485a46421","toSide":"left"},
		{"id":"4d4079642f9bc6b4","fromNode":"8f55f2948d88937b","fromSide":"right","toNode":"830b8943deb9198b","toSide":"left"},
		{"id":"8a567d5b99937ccf","fromNode":"ffb26f6485a46421","fromSide":"bottom","toNode":"830b8943deb9198b","toSide":"top"},
		{"id":"25d10be39713c1da","fromNode":"0741359314149e00","fromSide":"right","toNode":"936e063704d61de8","toSide":"left"},
		{"id":"ec61b4b880309e4a","fromNode":"0741359314149e00","fromSide":"right","toNode":"b650673ca44b0b15","toSide":"left"},
		{"id":"c7f4f677f900a1e2","fromNode":"76905bcbb96ec026","fromSide":"right","toNode":"3e4d6c709d5c9bb1","toSide":"left"},
		{"id":"28fb764c9c49b485","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"93f7f6ebd2d9c935","toSide":"left"},
		{"id":"15450549f190c88a","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"72d6398c49037f1f","toSide":"left"},
		{"id":"6b8bd5ecf1a24b3d","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"e99ba26801f321db","toSide":"left"},
		{"id":"03b9db1a2239c033","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"df219ae6a547bc3c","toSide":"left"},
		{"id":"3a4464e0db086fcb","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"ec4b593ff87f02ab","toSide":"left"},
		{"id":"e140c812de75ba77","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"4b7a84893663ac8c","toSide":"left"},
		{"id":"b84e8425da35fb4b","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"da6bb16c6b52b05e","toSide":"left"},
		{"id":"33504e4c66fa3ac9","fromNode":"93f7f6ebd2d9c935","fromSide":"bottom","toNode":"72d6398c49037f1f","toSide":"right"},
		{"id":"3586b58730a22632","fromNode":"3e4d6c709d5c9bb1","fromSide":"right","toNode":"9e54c48bdc5dfcb2","toSide":"left"}
	]
}